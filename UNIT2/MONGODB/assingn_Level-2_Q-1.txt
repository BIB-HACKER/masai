1. Find a document with the first name 'Danit' from the collection.

=> db.Employees.find({first_name:"Danit"})

2. Fetch all documents where the age is greater than or equal to 30.

=> db.Employees.find({age:{$gte:30}})

3. Retrieve all documents where the salary is less than or equal to 70000

=> db.Employees.find({salary:{$lte:70000}})

4. Find all documents where the age is greater than 30 and the salary is less than 90000.

=> db.Employees.find({$and:[{age:{$gte:30}},{salary:{$lte:90000}}]})

5. Retrieve all documents where the gender is 'Female' and the age is less than 25.

=> db.Employees.find({$and:[{gender:"Female"},{age:{$lte:25}}]})

6. Find all documents where the last name is 'Bestall' or the salary is greater than 80000.

=> db.Employees.find({$or:[{last_name:"Bestall"},{salary:{$gte:80000}}]})

7. Retrieve all documents where the gender is 'Male' and (age is less than 25 or salary is greater than 80000).

=> db.Employees.find({$and:[{gender:"Male"},{$or:[{age:{$lte:25}},{salary:{$gte:80000}}]}]})

8. Add a new student named 'Bob' with a last name 'Smith', male gender, age 22, and a salary of 60000 to the collection

=> db.Employees.insertOne({"first_name":"Bob","last_name":"Smith","gender":"Male","age":22,"salary":60000})

9. Retrieve all documents where the gender is 'Male' and age is greater than 40

=> db.Employees.find({$and:[{gender:"Female"},{age:{$gte:40}}]})

10. Find all documents where the last name is not 'Bestall' or the salary is less than 80000

=> db.Employees.find({$or:[{last_name:{$ne:"Bestall"}},{salary:{$lte:80000}}]})

